1.模板
    1.静态文件地址的反向解析
      根据静态文件的具体路径,生成静态访问路径
      语法:
        url_for('static',filename='file_path')
        ex:
            url_for('static',filename='images/a.jpg')
            结果:/static/images/a.jpg

2.子模板中
    1.指定需要继承自哪个父模板
       {% extends '父模板名称' %}
    2.按需要写
        {% block 块名 %}
            此处编写的内容会覆盖掉父模板中同名block的内容
            允许通过{{super()}}来调用父模板中的内容
        {% endblock %}

2.修改配置
    1.构建Flask允许指定的配置信息
        app=Flask(
            __name__,
            template_folder='xxx',
            static_folder = 'xxx',
            static_url_path = '/xxx'
            )
            1.template_folder :指定存放模板的文件夹的名称
            2.static_floder : 指定存放静态文件资源的文件夹的名称
                注意:如果没有指定static_url_path的话,则访问路径和static_floder 的名称是一致的
            3.static_url_path:指定静态文件的访问路径

    2.启动程序的允许配置
        app.run(debug=True,port=3000,houst='0.0.0.0')

    3.请求(request) 和 响应(response)

        1.HTTP协议
          http:Hyper Text Transfer Protocol
          作用:规范了数据是如何打包以及传递的
          1.通用消息
          2.请求消息
            1.请求的起始行
                1.请求方式 - GET / POST
                2.请求协议 - http / https
                3.协议版本 - 1.1
            2.请求的消息头
                表达客户端浏览器要传递给服务器的信息
                由 key:value 的形式组成
                每个消息头会传递到不同的信息给服务器
            3.请求体
                伴随这请求要地传递给服务端的信息就是请求体,只有GET和 put 请求时有请求体
                其他请求方式没有请求体
          3.响应消息
            作用:将服务器端的信息传递给浏览器
                1.响应起始行
                    1.协议以及版本号 : HTTP/1.1
                    2.响应状态码 : 200 / 404 / 500
                        1xx:请求已收到,继续处理
                        2xx:请求成功接收
                        3xx:该请求需要进一步处理
                            301 - 永久性重定向
                            302 - 临行性重定向
                            304 - 无修改,从缓冲中提取数据
                        4xx :没找到资源或无权限
                            404 :请求资源不存在
                            403 :Ｆｏｒｂｂｉｄｅｎ
                            405 : Method Not Allowed
                        5xx: 服务器处理请求失败
                            500: 最讨厌的
                    3.原因短句
                    以简短的英文单词解释响应状态码
                    200:ok
                    404:not found
                    301: Moved Perman

                2.响应消息头
                    以 key:value 的形式存在,要传递给浏览器的一些说明信息
                    ex:
                        Content-Type : application / javascript
                        Content-Type 作用:告诉浏览器响应回来的数据的类型
                3.响应主体


2.请求对象 - request
    request = 请求对象,封装了所有与请求相关的信息,如:请求数据,请求消息头...

    在Flask中,如果要使用request的话,必须先导入
    from flask import request
    允许在视图处理函数中使用request

    1.request的常用成员
        1.scheme : 获取请求协议
        2.method : 获取本次请求的请求方法(GET / POST)
        3.args : 获取以GET请求方式提交的数据
        4.from : 获取以post 请求方式提交的数据
        5.cookies : 获取cookies的相关信息
    2.获取请求提交的数据
        1. get 请求方式
            1.地址栏上提交的数据
            http://localhost:5000/04-request?name=abc&age=30

            2.from表单中使用get方式提交
                <form action='/04-request'>
                    <input type='text' name='name'>
                    <input type='number' name='age'>
                    <input type='submit'>
                </form>
            http://localhost:5000/04-request?name=abc&age=30
            3.使用location

        2. post 请求方式
            只有表单中设置method为post才能产生post请求

            request.form 封装的就是以post 方式请求提交过来的数据,允许按照字典的方式操作数据
                request.form['控件的name值']
                request.form.get('控件的name值')