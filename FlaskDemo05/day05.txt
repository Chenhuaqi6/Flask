1.模型类的映射管理
    1.什么是映射管理
        对模型类/实体类的修改允许再映射回数据库
    2.依托于第三方库完成管理
        1.flask-script
            pip3 install flask-script
            包:flask_script
            类:Manager
                作用:可以对项目进行管理,如:启动项目 添加命令
        2.flask-migrate
            pip3 install flask-migrate
            包:flask_migrate
            类:
                1.Migrate
                    作用:用于管理 app 和 db 之间的协调关系
                2.MigrateCommand
                    作用:允许在终端中提供实体类迁移的命令

    3.实现数据库的迁移
        1.python3 run01.py(文件名) db init
            作用:做一些初始化的行为操作
            特点:一个项目中只执行一次就可以了
        2.python3 run01.py db migrate
            作用:将编写好的实体类生成中间文件
            特点:只要检测到实体类有修改,就会生成中间文件
        3.python3 run01.py db upgrade
            作用:将中间文件映射回数据库,执行完之后数据库就会有所改变

2.ORM中的CRUD
    1.增加 - C(create)
        1.创建实体的对象,并为属性赋值
            user = User()
            user.uname = 'chenhuaqi'
            user.age = 18

        2.将实体对象增加回数据库
            db.session.add(实体对象)
            #针对非查询操作,必须要手动提交回数据库
            db.session.commit()
        3.配置操作自动提交
            针对所有非查询操作
            配置成功后,会在执行完视图之后,整体将行为提交回数据库中
            app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN'] = True

    2.查询 - R(Retrieve)

        1.基于db.session 进行查询
            1.db.session.query()
               该函数会返回一个Query对象,类型为BaseQuery
               该返回值中会包含针对某个实体或实体中的列所有的查询操作
               语法:
                  1.db.session.query(实体类)
                   查询对应实体类中所有列的数据
                   ex:
                    db.session.query(User)
                    等同于:select * from user
                  2.db.session.query(实体类.属性1,实体类.属性2)
                     查询对应实体类中部分列中的数据
                     ex:
                        db.session.query(User.id,User.uname)
                        等同于:select user.id,user.uname from user
            2.查询执行函数
                目的:在query()的基础上的得到最终的数据
                语法:
                    db.session.query(xxx).查询执行函数()
                函数           说明
                all()          以列表的方式返回query()中所有的数据
                first()        以实体对象的方式返回query()中的第一条数据,如果没有结果,则返回None
                first_or_404()  效果同上,如果查询不到数据,则响应404
                count()        返回查询结果的数量
            3.查询过滤器函数
                作用:在db.session.query()的基础上,进行条件筛选
                语法:db.session.query().查询过滤器函数().查询执行函数()
                过滤器函数              说明
                filter()               按指定条件进行过滤
                filter_by()            按指定条件过滤时使用
                limit()                获取前几行数据
                order_by()             排序
                group_by()             分组

                过滤器详解:
                    1.filter()
                        作用:实现查询中的各种条件
                        注意:条件必须偶由 实体类.属性 构成
                        1.查询年龄大于17 的user的信息
                            db.session.query(User).filter(User.uage>18).all()
                        2.查询年龄大于17并且id大于1的user的信息(多个条件在filter中逗号隔开)
    `                       db.session.query(User).filter(User.uage>18,User.id > 1).all()
                        3.查询年龄大于17或者id大于1的user的信息
                            注意:查询 或 的操作,要借助于 or_()
                            用法:or_(条件1,条件2)
                            db.session.query().filter(or_(xxx)).all()
                        4.查询id的值为2 的user的信息( == )
                            注意:等值判断要用 双等号 ==
                            db.session.query().filter(User.id==2).first()
                        5.查询uemail中包含 w 的user的信息
                           sql语句:
                                select * from user where uemail like '%w%'
                           注意:模糊查询like需要使用实体类的属性所提供的like()完成查询
                           db.session.query(User).filter(User.umail.like('%w%')).all()
                        6.模糊查询 --- in
                            注意:模糊查询in需要实体类的属性所提供的in_()完成查询
                            db.session.query(User).filter(User.uage.in_([15,17,19])).all()
                        7.模糊查询 -- between and
                            注意:模糊查询between and 需要实体类的属性所提供between(值1,值2)完成查询
                            db.session.query(User).filter(User.uage.between(13,15)).all()
                    2.filter_by()
                        作用: 只做等值条件筛选过滤,并且只用于单表查询
                        特点:
                            1.不用 实体类.属性名,直接使用属性名即可
                            2.不用 == ,而用 =
                           db.session.query(User).filter_by(id=1).first()
                    3.limit()
                        作用:获取前几行数据
                        语法:db.session.query(User).limit(num).all()
                        1.db.session.query(User).limit(1).all()
                            获取前一条数据
                        2.使用 offset() 可以完成数据的偏移
                            db.session.query(User).limit(2).offset(3).all()
                            跳过前三条数据,再获取剩余的前2条数据
                        sql语句:
                            select * from user limit(2,3) 跨2条取3条
                    4.order_by()
                        1.User表中的数据按id降序排序
                            db.session.query(User).order_by('id desc')
                        2.user表中的数据按年龄升序排序,id降序排序
                            db.session.query(User).order_by('age,id desc')
                                                             先按前面的拍,如果age相同按后面的条件排


        2.基于 实体类 进行查询
基于 实体类 的查询


1.查询 - c
    1.聚合查询
    #查询表中所有的用户的年龄(uage)的和是多少
    from sqlalchemy import func
    # func对象中提供了所有的聚合函数
    db.session.query(func.聚合函数(User.uage)).all()
        聚合函数:
            sum() : 求和
            count() :求非空的数量
            max() : 最大值
            min() : 最小值
            avg() : 求平均值

    #查询user表中所有人的平均年龄(uage)是多少??
    db.session.query(func.avg(User.uage)).first()

    select sum(uage) as 'sumAge',avg(uage) as 'avgAge' from user group by id

    2.分组聚合查询
        db.session.query(聚合).group_by('属性名').all()


        ##1.2 在user表中按uage进行分组,求每组中的年龄的平均值,以及uage的总和
        result = db.session.query(func.avg(User.uage),func.sum(User.uage)).group_by('uage').all()
        [
        (Decimal('15.0000'), Decimal('15')),
        (Decimal('18.0000'), Decimal('54')),
        (Decimal('19.0000'), Decimal('19'))
        ]


        1.为 User 实体类增加一个属性,isActive(为User表增加一个列isActive),默认值为True
        2.到数据库中随意修改几条数据的 isActive 的值为 False
        3.在程序中实现,统计被激活的用户数量以及未被激活的用户数量分别是多少并打印输出

    3.带条件的分组聚合
				db.session.query(聚合).filter(条件).group_by(分组).having(分组后条件)
				ex:
					在 user 表中要统计大于16岁的用户的激活人数和未激活人数,并输出大于2人的信息
		2.基于实体类进行查询
			MODELS.query.查询过滤器函数(条件参数).查询执行函数()
			ex:查询user表(User类)中所有的数据
			1.使用 db.session
				db.session.query(User).all()
			2.使用 实体类
				User.query.all()
			ex:查询id为1的user的信息
			1.使用db.session
				db.session.query(User).filter_by(id=1).first()
			2.使用 实体类
				User.query.filter_by(id=1).first()
				User.query.filter(User.id==1).first()
	2.修改 - U(Update)
		1.查
			将要修改的信息查询出来
		2.改
			通过实体对象.属性 = 值
		3.保存
			db.session.add(实体对象)
	3.删除 - D(Delete)
		1.查
			查询出要删除的实体对象
		2.删
			db.session.delete(要删除的实体对象)
	4.重定向 - redirect()
		重定向:在服务器端,指定重新向一个新的地址发送请求







5.关系映射
    1.一对多
        1.什么是一对多
            A表中的一条数据能够关联到B表中的多条数据
            B表中的一条数据能够关联到A表中的一条数据

            ex:
                1.博客系统中的用户与发表的文章
                   1个用户允许发表多篇文章
                   1篇文章只能由一个用户发表
                2.老师(Teacher) 与 课程(Course)
                   1名老师只能教授一门课
                   一门课可以被多名老师所教授
                   课程(1):老师(M)
        2.一对多在数据库中的实现
            依托与  主外键 关系创建
            在 "多" 的表中增加外键,要引用自 "一" 表的主键
        3.在 Flask-SQLAlchemy 上的实现
            在"多"实体类中增加对 "一"实体类的引用
           1.在"多" 实体类中:增加一个列,引用自"一"表(类)的主键
             外键列名 = db.Cloum(db.Integer(数据类型),db.ForeignKey('主键表.主键列'))

           2.在"一"的实体类中:
                增加关联属性以及反向引用关系属性(难点)
                关联属性:
                    1.在"一"的实体中,要通过哪个<<属性>>来获取到对应的所有的"多"的实体对象们
                    2.反向引用关系:
                        在"多"的实体中,要通过哪个<<属性>>来获取对应的"一"的实体的对象

                    语法:
                        属性名("一的实体") = db.relationship('多的实体类名',backref='反向引用关系属性名称',lazy(延迟加载模式) = 'dynamic')
                        lazyL指定延迟加载模式,指定如何加载关联数据
                            1.select: 首次访问时,加载关联数据
                            2.immediate: 源对象使用后,马上加载关联数据
                            3.subquery: 效果同上,但是会使用子查询的方式加载关联数据
                            4.noload: 永不加载记录
                            5.dynamic: 默认不加载记录,但会提供加载记录的查询
                        ex:
                            class Teacher(db.,Model):
                                xxxx
                                course_id = db.Colum(db.Integer,db.Foreignbkey())


                            class Course(db.Model):
                                xxx
                                #增加关联属性以及反向引用关系属性
                                teachers = db.relationship('Teacher',backref = 'course',lazy = 'dynamic')
                                #就是在加了一个属性可以用course.teachers 得到该课的所有老师
    2.一对一
       1.什么是一对一
         A表中的一条记录只能与B表中的一条记录相关联
         B表中的一条记录只能与A表中的一条记录相关联
       2.在数据库中的体现
         关联的俩张表的任意一张表中:增加外键,引用自另一张表的主键,并施加唯一约束
       3.在实体类中的体现
        1.在任意一个类中增加:外键列名 = db.Column(db.Integer,db.ForeignKey('zhujianbiao.zhujian'),unique=True)

        class User(db.Model):
            __tablename__ = 'user'
            xxxx   xxxx
            wife = db.relationship('Wife',backref='user',uselist=False)
        class Wife(db.Model):
            __tablename__ = 'wife'
            xxxx   xxxx

            user_id = db.Column(db.Integer,db.ForeignKey('user.id'),unique=True)

        2.在另外一个实体类中增加:关联属性和反向引用关系属性
                属性 = dbrelationship('关联的实体类',backref='反向引用关系属性名称',uselist=False)
                    uselist :该属性将使用标量来表示,而不是列表
             练习:完成一对一的查询操作 路径:/13-queryuser 去往:13-queryuser.html模板

    3.多对多

        A表中的一条数据可以与B表中的任意多条数据相关联
        B表中的一条数据可以与A表中的任意多条数据相关联



        1.创建关联表(实体类)
           classs TeacherStudent(db.Model):
                __tablename__ = 'teacher_student'
                id = db.Column(db.Integer,primary_key = True)
                teacher_id = db.Column(db.Integer,db.ForeignKey('teacher.id'))
                student_id = db.Column(db.Integer,db.ForeignKey('student.id'))

        2.增加关联属性 和 反向引用关系
            class Tracher(db.Model):
                __tablename__ = teacher
                xxx  xxxx


                students = db.relationship('Student',secondary='teacher_student',lazy='dynamic',backref=db.backref('teachers',lazy='dynamic'))



day08
2.cookies / cookie
    1.什么是cookies
        cookies是一种数据存储手段,将一段文本保存在客户端(浏览器)的一种存储手段,并可以长期保存
    2.cookies的使用场景
        1.记住密码
        2.记住搜索关键词
    3.特点:
        1.cookies是以浏览器为单位,不同的浏览器之间的cookies是不共享的
        2.各个网站之间的cookies也是相互独立的,不共享
        优点:
            1.可以解决一些服务器端的一些存储问题,允许非重要的数据保存在客户端浏览器中,从而节省服务器端的位置
            2.可以长时间保存数据
        缺点:
            1.明文显示所有的数据
            2.cookies中的内容在客户端是允许被修改的

3.Flask中使用 cookies
    1.保存cookies
        要通过 响应对象 将cookies从服务器端带到浏览器上
        响应对象:
            1.resp = redirect('/重定向地址')
              resp 是一个响应对象
            2.from flask import make_response
              resp = make_response('字符串'|render_template())
              resp 是一个响应对象
              return resp
          添加cookies的语法
            响应对象.set_cookie(key,value,max_age(最大保存时间))
                key:要保存的cookies的名称
                value:要保存的cookies的值
                max_age:该cookies存活的最大时间(以s为单位,但s省略不写)
                    1.1 表示1秒
                    2.60 表示一分钟
                    3.60*60 表示一小时
                    4.60*60*24 表示一天
                    5.60*60*24*365 表示一年
                ex:
                    @app.route('/01-addcookies')
                    def addcookies_views():
                        resp = make_response('添加cookies成功')
                        resp.set_cookie('uname','wangwc',60*60*24*365)
                        return resp
    2.获取cookies
    3.删除cookies







































