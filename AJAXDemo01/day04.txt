1.jq 对 ajax 支持
  1.$.ajax()
    语法: $.ajax({})
        1.url :字符串，表示异步请求的地址
       　2.type :字符串，表示请求方式
        3.data :传递到服务器端的参数
            1.可以是字符串: "uname=wangwc&uage=30"
            2.可以是JSON
                {
                    "uname":"wangwc"
                    "uage":30
                }
        4.dataType : 字符串,表示服务器端响应回来的数据格式
            1.html
            2.xml
            3.text
            4.script
            5.json
            6.jsonp :跨域时使用
        5. anync : 布尔类型,表示是否采用异步的方式
            true: 采用异步
            false : 采用同步
        6.success : 回调函数,请求和响应成功后的操作
            function(data){
                data 表示响应回来的数据
            }
        7.error : 回调函数,请求或响应失败时回来执行的操作
        8.beforeSend : 回调函数,发送ajax请求之前要执行的操作
            如果 return false 则表示终止发送请求

2.跨域(Cross Domain)
    1.什么是跨域
        HTTP协议中有一种"同源策略"
            同源:在多个地址中,相同协议,相同域名,相同端口被视为"同源"
            在HTTP中,必须是同源地址才能互相发送请求,非同源的请求会被拒绝(<script>和<img>除外)

            http://www.tedu.cn/a.html
            http://www.tedu.cn/page/b.html
            以上地址是"同源"地址

            http://www.tedu.cn/a.html
            https://www.tedu.cn/server/a.html
            以上地址协议不同,非同源

            http://www.tedu.cn:80/a.html
            http://www.tedu.cn:81/server/a.html
            由于端口号不同,以上地址非同源

            http://localhost:5000/a.html
            http://127.0.0.1:5000/server/getall
            由于域名不同,以上地址非同源
    2.解决方案
        通过<script> 向服务器发送请求
        由服务器资源指定前段页面的哪个方法来执行响应的数据

        实现:
            1.在前端中向实现跨域操作时,动态创建script标记
                var script = document.createElement('script')
            2.为script 元素设置相应属性
                 1.设置 type 的值为 text/javascript
                 2.设置 src 的值为 请求地址
            3.发送请求
                将创建好的script元素追加到网页中即可
                    var body = document.getElementByTagName("body")[0]
                    body.append(script)
            4.在前端,创建处理数据的响应方法
                function process(data){

                ..... .....
                }
            5.在服务器端,响应数据
                特点:指定调用前端的哪个处理方法
                def xxx():
                    return "process('xxxx')"

    3.jQuery 的跨域
        jsonp : json with padding
        $.ajax({
            url:'xxx',
            type:'get/post',
            dataType:'jsonp',#指定为跨域访问
            success:function(data){
                //响应成功后的处理
            }
        })















